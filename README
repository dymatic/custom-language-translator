The NCLT, Noran Custom Language Translator, is a program that
can read a langdefines file to translate code back and forth.

The repository comes with a langdefines for my own language,
NRSL.

When you run the program you need to specify the langdefines file,
which uses the old_new syntax, the code, an output file, and a 
magichar. The magichar is used for sensitive strings, which are
things you do not want translated. You put it in between two magichars.

The program will translate according to langdefines and nothing else.
For instance, if you set "||_or" in the langdefines and wrote "tore"
it would translate into "t||e", so you should put everything of the 
sort in between two magichars. I use "$" as my magichar.

There are serveral new features present in version 2. The langdefines
is commentable with TWO $ characters. Not using two will cause the 
program to crash. You can put just one for names and such, but you have
to include the ALLOW character (@) to let it work. With the allow character,
you can have any number of $'s you want.

Do NOT put more than one set of magichars in anything you are splitstr'ing.
This includes langdefines (without the allow character) and code.

Iterative Compiling (iCompile) and Noran Makefile capabilities can only be
 used during interactive (no-arg) mode.

CHANGELOG
1 - The proejct works.
2 - Comments, sanitization, and two running modes.
2.1 - Upon request I added non-interactive mode. Call it with [program] path_to_langdefines path_to_code path_to_output magichar
2.2 - Lots of work wit the langdefines. Some more syntax to understand.
Comments can be used in the langdefines with two "$"s. Now, there is an
allow character that will make comments not matter.
2.3 - A new compiling mode for interactive mode called iCompile that uses
a Noran Makefile (.nmf)

PLANS
I want to add some newline handling to the langdefines. I also want
to add langdefines titles that go in between =='s and have an allow
character. This is easily accomplished.
